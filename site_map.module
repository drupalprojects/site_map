<?php
// $Id$

/**
 * @file
 * Original author: Nic Ivy
 * Now maintained by by Fredrik Jonsson fredrik at combonet dot se
 */

/**
 * Implementation of hook_help().
 */
function site_map_help($section = 'admin/help#site_map') {
  switch ($section) {
    case 'admin/modules#description':  // Displayed in admin/system/modules where modules are enabled/disabled
      return t('Display a site map.');
    case 'sitemap':
      return variable_get('site_map_message', '');
  }
}


/**
 * Implementation of hook_perm().
 */
function site_map_perm() {
  return array('access site map');
}


/**
 * Implementation of hook_settings().
 */
function site_map_settings() {
  $output = form_textarea(t('Site map message'), 'site_map_message', variable_get('site_map_message', ''), 60, 5, t('Define a message to be displayed above the site map.'));

  $group = form_checkbox(t('Show recent blog authors'), 'site_map_show_blogs', 1, variable_get('site_map_show_blogs', 1), t('When enabled, this option will show the recent blog authors.'));
  $group .= form_checkbox(t('Show books'), 'site_map_show_books', 1, variable_get('site_map_show_books', 1), t('When enabled, this option will show all books.'));
  $group .= form_checkbox(t('Show node counts by categories'), 'site_map_show_count', 1, variable_get('site_map_show_count', 1), t('When enabled, this option will show the number of nodes in each taxonomy term.'));

  $result = db_query('SELECT vid, name FROM {vocabulary}');
  while ($row = db_fetch_object($result)) {
    $vocab_options[$row->vid] = $row->name;
  }
  $group .= form_checkboxes(t('Categories to include in the site map'), 'site_map_show_vocabularies', variable_get('site_map_show_vocabularies', array()), $vocab_options);

  $menu = menu_get_menu();
  foreach ($menu['items'][0]['children'] as $mid) {
    $menu_options[$mid] = $menu['items'][$mid]['title'];
  }
  $group .= form_checkboxes(t('Menus to include in the site map'), 'site_map_show_menus', variable_get('site_map_show_menus', array()), $menu_options);
  $output .= form_group(t('Site map content'), $group);

  $group = form_checkbox(t('Include RSS links by categories'), 'site_map_show_rss_links', 1, variable_get('site_map_show_rss_links', 1), t('When enabled, this option will show links to the RSS feeds for each category.'));
  $group .= form_textfield(t('RSS feed depth'), 'site_map_rss_depth', variable_get('site_map_rss_depth', 'all'), 3, 10, t('Specify how many subcategories should be included in the RSS feed.  Enter "all" to include all subcategories or "0" to include no subcategories.'));
  $output .= form_group(t('RSS settings'), $group);

  return $output;
}

/**
 * Implementation of hook_menu().
 */
function site_map_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'sitemap',
      'title' => t('site map'),
      'callback' => 'site_map_page',
      'access' => user_access('access site map'),
      'type' => MENU_SUGGESTED_ITEM);
  }
  else {
    theme_add_style(drupal_get_path('module', 'site_map') .'/site_map.css');
  }

  return $items;
}


/**
 * Menu callback; The site map
 */
function site_map_page() {

  // Set breadcrumbs
  $breadcrumb = array(array('path' => 'sitemap'));
  menu_set_location($breadcrumb);

  $output = _site_map_front_page();

  if (variable_get('site_map_show_blogs', 1)) {
    $output .= _site_map_blogs();
  }

  if (variable_get('site_map_show_books', 1)) {
    $output .= _site_map_books();
  }

  $output .= _site_map_menu_tree();

  // Compile the vocabulary trees.
  $output .= _site_map_render();

  $output = '<div class="site_map">'. $output .'</div>';

  print theme('page', $output);
}


function _site_map_front_page() {
  $title = t('Front page');
  $output = l(t("Front page of %sn", array ("%sn" => variable_get("site_name", "Drupal"))), './') .' '. l(t('RSS'), 'node/feed', array('class' => 'rss'));
  $output = theme('box', $title, $output);

  return $output;
}

/**
 * Render the latest blog authors
 */
function _site_map_blogs() {
  $title = t('Blogs');
  $output = '<div class="description">'. t("Community blog and recent blog authors at <i>%sn</i>.", array ("%sn" => variable_get("site_name", "Drupal"))) .'</div>';

  $blogs = array();
  $blogs[] .= l(t('All blogs'), 'blog') .' '. l(t('RSS'), 'blog/feed', array('class' => 'rss'));
  $result = db_query_range("SELECT DISTINCT(u.uid), u.name 
    FROM {users} u 
    INNER JOIN {node} n ON u.uid = n.uid 
    WHERE n.type = 'blog' AND n.status = 1", 0, 10);
  while ($account = db_fetch_object($result)) {
    $blogs[] = l(t("%s's blog", array ("%s" => $account->name)), "blog/$account->uid") .' '. l(t('RSS'), "blog/$account->uid/feed", array('class' => 'rss'));
  }
  $output .= theme('item_list', $blogs);
  $output = theme('box', $title, $output);

  return $output;
}


/**
 * Render books
 */
function _site_map_books() {
  $title = t('Books');
  $output = '<div class="description">'. t("Books at <i>%sn</i>.", array ("%sn" => variable_get("site_name", "Drupal"))) .'</div>';

  $books = array();
  $result = db_query(db_rewrite_sql('SELECT n.nid 
    FROM {node} n 
    INNER JOIN {book} b ON n.nid = b.nid 
    WHERE b.parent = 0 AND n.status = 1 AND n.moderate = 0 
    ORDER BY b.weight, n.title'));
  while ($page = db_fetch_object($result)) {
    // Load the node:
    $node = node_load(array('nid' => $page->nid));
    if ($node) {
      // Take the most recent approved revision, extract the page and check output:
      $node = book_content($node, TRUE);
      // Output the content:
      $books[] = l($node->title, 'node/'. $node->nid);
    }
  }
  $output .= theme('item_list', $books);
  $output = theme('box', $title, $output);

  return $output;
}


/**
 * This function can be called from blocks or pages as desired.
 */
function _site_map_render() {
  $vids = variable_get('site_map_show_vocabularies', array());
  $result = db_query('SELECT vid, name, description 
    FROM {vocabulary} WHERE vid IN (%s) ORDER BY weight ASC, name', implode(',', $vids));
  while ($t = db_fetch_object($result)) {
    // taxonomy_get_tree() honors access controls
    $tree = taxonomy_get_tree($t->vid);
    $output .= _site_map_taxonomy_tree($tree, $t->name, $t->description);
  }

  return $output;
}


/**
 * Render taxonomy tree
 *
 * @param $tree The results of taxonomy_get_tree() with optional 'count' fields.
 * @param $name An optional name for the tree. (Default: NULL)
 * @param $description An optional description of the tree. (Default: NULL)
 * @return A string representing a rendered tree.
 */
function _site_map_taxonomy_tree(&$tree, $name = NULL, $description = NULL) {
  $title = $name ? $name : '';
  $output = $description ? '<div class="description">'. $description. '</div>' : '';

  $last_depth = -1;
  $output .= '<div class="tree">';
  foreach ($tree as $term) {
    // Adjust the depth of the <ul> based on the change
    // in $term->depth since the $last_depth.
    if ($term->depth > $last_depth) {
      for ($i = 0; $i < ($term->depth - $last_depth); $i++) {
        $output .= '<ul>';
      }
    }
    else if ($term->depth < $last_depth) {
      for ($i = 0; $i < ($last_depth - $term->depth); $i++) {
        $output .= '</ul>';
      }
    }
    // Display the $term.
    $output .= '<li>';
    $output .= l(check_plain($term->name), 'taxonomy/term/'. $term->tid, array('title' => $term->description), NULL, NULL, FALSE, TRUE);
    if (variable_get('site_map_show_count', 1)) {
      $count = taxonomy_term_count_nodes($term->tid);
      $output .= " ($count)";
    }
    if (variable_get('site_map_show_rss_links', 1)) {
      if (is_numeric($rss_depth) && $rss_depth > 0) {
        $rss_depth = variable_get('site_map_rss_depth', 'all');
      }
      else {
        $rss_depth = 'all';
      }
      $output .= ' '. l(t('RSS'), "taxonomy/term/$term->tid/$rss_depth/feed", array('class' => 'rss'));
    }
    $output .= "</li>\n";
    // Reset $last_depth in preparation for the next $term.
    $last_depth = $term->depth;
  }
  // Bring the depth back to where it began, -1.
  if ($last_depth > -1) {
    for ($i = 0; $i < ($last_depth + 1); $i++) {
      $output .= '</ul>';
    }
  }
  $output .= "</div>\n";
  $output = theme('box', $title, $output);

  return $output;
}

function _site_map_menu_tree() {
  if ($menus = variable_get('site_map_show_menus', array())) {
    $output = '';
    $menu = menu_get_menu();
    foreach ($menus as $mid) {
      $title = $menu['visible'][$mid]['title'];
      $menu_display = theme('site_map_menu_tree', $mid, $menu);
      $output .= theme('box', $title, $menu_display);
    }
  }

  return $output;
}

function theme_site_map_menu_tree($pid = 1, $menu = NULL) {
// based on functions theme_menu_tree and menu_tree
  $menu_tree = '';
  if (isset($menu['visible'][$pid]) && $menu['visible'][$pid]['children']) {
    foreach ($menu['visible'][$pid]['children'] as $mid) {
      $type = isset($menu['visible'][$mid]['type']) ? $menu['visible'][$mid]['type'] : NULL;
      $children = isset($menu['visible'][$mid]['children']) ? $menu['visible'][$mid]['children'] : NULL;
      $menu_tree .= theme('menu_item', $mid, theme('site_map_menu_tree', $mid, $menu), count($children) == 0);
    }
  }
  if ($menu_tree) {
    $output = '<ul class="tree">'. $menu_tree .'</ul>';
  }

  return $output;
}

?>