<?php
// $Id$

/**
 * hook_help() implementation
 */
function site_map_help($section = 'admin/help#site_map') {
  $output = '';

  switch ($section) {

    case 'admin/modules#description':  // Displayed in admin/system/modules where modules are enabled/disabled
      $output = t('Display a site map.');
      break;
    case 'sitemap':
      $output = variable_get('site_map_message', '');
      break;

  }

  return $output;
}

/**
 * hook_perm() implementation
 */
function site_map_perm() {
  return array("access site map", "administer site map");
}

/**
 * hook_settings() implementation
 */
function site_map_settings() {
  $output .= form_textarea(t('Site map message'), 'site_map_message', variable_get('site_map_message', ''), 60, 10, t('Define a message to be displayed above the site map.'));
  $output .= form_checkbox(t('Show node counts by categories'), 'site_map_show_count', 1, variable_get('site_map_show_count', 1), t('When enabled, this option will show the number of nodes in each taxonomy term.'));
  $output .= form_checkbox(t('Include navigation menus'), 'site_map_show_nav_menus', 1, variable_get('site_map_show_nav_menus', 1), t('When enabled, this option will include the fully-expanded top-level navigation menus in the site map'));
  $output .= form_checkbox(t('Include RSS links by categories'), 'site_map_show_rss_links', 1, variable_get('site_map_show_rss_links', 1), t('When enabled, this option will show links to the RSS feeds for each category.'));
  $output .= form_textfield(t('RSS feed depth'), 'site_map_rss_depth', variable_get('site_map_rss_depth', 'all'), 3, 10, t('Specify how many subcategories should be included in the RSS feed.  Enter "all" to include all subcategories or "0" to include no subcategories.'));

  $result = db_query('SELECT vid, name FROM {vocabulary}');
  $value = variable_get('site_map_show_vocabularies', array());

  while ($row = db_fetch_object($result)) {
    $options[$row->vid] = $row->name;
  }

  $output .= form_select(t('Categories to include in the site map'), 'site_map_show_vocabularies', $value, $options, NULL, 0, TRUE);

  return $output;
}

/**
 * hook_menu() implementation
 */
function site_map_menu() {
   $items[] = array(
     'path' => 'sitemap',
     'title' => t('site map'),
     'callback' => '_site_map_page',
     'access' => (user_access('access site map') || user_access('administer site map'))
    );

  return $items;
}

/**
 * The site map
 */
function _site_map_page() {
  //
  // Compile the vocabulary trees.
  //
  print theme('page', _site_map_render());
}

/**
 * This function can be called from blocks or pages as desired.
 */
function _site_map_render() {
  $vids = variable_get('site_map_show_vocabularies', array('0'));
  $result = db_query('SELECT vid,name,description FROM {vocabulary} WHERE vid IN (%s) ORDER BY weight ASC, name', implode(',', $vids));
  while ($t = db_fetch_object($result)) {
    //
    // taxonomy_get_tree() honors access controls
    //
    $tree = taxonomy_get_tree($t->vid);

    $output .= _site_map_taxonomy_tree($tree, variable_get('site_map_show_count', 1), $t->name, $t->description);
  }

  return $output;
}

/**
 * Render taxonomy tree
 *
 * @param $tree The results of taxonomy_get_tree() with optional 'count' fields.
 * @param $show_count Enabled node count if set.
 * @param $name An optional name for the tree. (Default: NULL)
 * @param $description An optional description of the tree. (Default: NULL)
 * @return A string representing a rendered tree.
 */
function _site_map_taxonomy_tree(&$tree, $show_count, $name = NULL, $description = NULL) {
  $name && $output = '<div class="name">'.$name.'</div>';
  $description && $output .= '<div class="description">'.$description.'</div>';

  $show_rss_links = variable_get('site_map_show_rss_links', 1);
  if ($show_rss_links) {
    $rss_depth = variable_get('site_map_rss_depth', 'all');
    if (!is_numeric($rss_depth) || $rss_depth < 0) {
      $rss_depth = 'all';
    }
  }

  $last_depth = -1;
  $output .= '<div class="tree">';
  foreach ($tree as $term) {
    //
    // Adjust the depth of the <ul> based on the change
    // in $term->depth since the $last_depth.
    //
    if ($term->depth > $last_depth) {
      for ($i = 0; $i < ($term->depth - $last_depth); $i++) {
        $output .= '<ul>';
      }
    }
    else if ($term->depth < $last_depth) {
      for ($i = 0; $i < ($last_depth - $term->depth); $i++) {
        $output .= '</ul>';
      }
    }

    //
    // Display the $term.  If $term->count exists, show the count too.
    //
    $output .= '<li>';
    $output .= l(check_plain($term->name), 'taxonomy/term/'. $term->tid, array('title' => $term->description), NULL, NULL, FALSE, TRUE);
    if ($show_rss_links) {
      $output = $output . ' <span class="rss">' . l(t('RSS'), "taxonomy/term/{$term->tid}/{$rss_depth}/feed") . '</span>';
    }
    
    if ($show_count) {
      $count = taxonomy_term_count_nodes($term->tid);
      $output .= " ($count)\n";
    }

    $output .= "</li>\n";

    //
    // Reset $last_depth in preparation for the next $term.
    //
    $last_depth = $term->depth;
  }

  //
  // Bring the depth back to where it began, -1.
  //
  if ($last_depth > -1) {
    for ($i = 0; $i < ($last_depth + 1); $i++) {
      $output .= '</ul>';
    }
  }

  $output .= "</div>\n";

  return '<div class="site_map">'.$output.'</div>';
}

?>
